[
  {
    "objectID": "hw3.html",
    "href": "hw3.html",
    "title": "Homework3-2",
    "section": "",
    "text": "read.csv(myfolder/Mydata.csv)\n\n\n\nThe major benefit of using R projects is the usage of relative paths.\n\n\n\nGit is open source and installed locally, whereas github is on a website database.\n\n\n\nTibbles have all variable types, and cannot partially match.\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\niris_tbl &lt;- as_tibble(iris) |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n\n\n\nLong format data is when one row represents one observation, whereas wide is one column represents one observation. For statistical analysis, long format data is preferred."
  },
  {
    "objectID": "hw3.html#task-1",
    "href": "hw3.html#task-1",
    "title": "Homework3-2",
    "section": "",
    "text": "read.csv(myfolder/Mydata.csv)\n\n\n\nThe major benefit of using R projects is the usage of relative paths.\n\n\n\nGit is open source and installed locally, whereas github is on a website database.\n\n\n\nTibbles have all variable types, and cannot partially match.\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\niris_tbl &lt;- as_tibble(iris) |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n\n\n\nLong format data is when one row represents one observation, whereas wide is one column represents one observation. For statistical analysis, long format data is preferred."
  },
  {
    "objectID": "hw3.html#task-2---glass-data",
    "href": "hw3.html#task-2---glass-data",
    "title": "Homework3-2",
    "section": "Task 2 - Glass Data",
    "text": "Task 2 - Glass Data\n\nlibrary (tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(Lahman)\n#1\n\n#read in the raw data file named glass data, and put in column names.\nglass_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",\n                          delim = \",\",\n                          col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe   X11\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0        1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0        1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0        1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0        1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0        1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26     1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0        1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0        1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0        1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11     1\n# ℹ 204 more rows\n\n#2\n\n#overwrite last column with character strings \nglass_data_tbl &lt;- as_tibble(glass_data)\nglass_data_tbl |&gt;\n  mutate(desc = ifelse(glass_data_tbl$X11 == 1, \"building_windows_float_processed\",\n              ifelse(glass_data_tbl$X11 == 2, \"bulding_windows_non_float_processed\",\n              ifelse(glass_data_tbl$X11 == 3, \"vehicle_windows_float_processed\",\n              ifelse(glass_data_tbl$X11 == 4, \"vehicle_windows_non_float_processed\",\n              ifelse(glass_data_tbl$X11 == 5, \"containers\",\n              ifelse(glass_data_tbl$X11 == 6, \"tableware\", \"headlamps\"))))))) |&gt;\n#3\n  #continue the chain and filter based on requirements.\n  filter(Fe &lt; 0.2, desc %in% c(\"tableware\", \"headlamps\"))\n\n# A tibble: 38 × 12\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe   X11 desc     \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0     6 tableware\n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0     6 tableware\n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0     6 tableware\n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0     6 tableware\n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0     6 tableware\n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0     6 tableware\n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0     6 tableware\n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0     6 tableware\n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0     6 tableware\n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0     7 headlamps\n# ℹ 28 more rows\n\nprint(glass_data_tbl)\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe   X11\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0        1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0        1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0        1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0        1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0        1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26     1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0        1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0        1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0        1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11     1\n# ℹ 204 more rows"
  },
  {
    "objectID": "hw3.html#task-2---yeast-data",
    "href": "hw3.html#task-2---yeast-data",
    "title": "Homework3-2",
    "section": "Task 2 - Yeast Data",
    "text": "Task 2 - Yeast Data\n\nlibrary(readr)\n#1 - Read in raw delimited data and create column names based on HW requirements.\ncolumnnames = c(\"seq_name\", \n                \"mcg\",\n                \"gvh\", \n                \"alm\", \n                \"mit\", \n                \"erl\",\n                \"pox\",\n                \"vac\",\n                \"nuc\",\n                \"class\")\nyeast_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n                         delim = \"  \",\n                         col_names = columnnames)\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"  \"\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nprint(yeast_data)\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\nyeast_data_tbl &lt;- as_tibble(yeast_data)\nprint(yeast_data_tbl)\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n#2 - Remove seq_name and nuc columns from tibble.\nyeast_data_tbl |&gt;\n  select(-seq_name, -nuc) |&gt;\n#add mean and median columns corresponding to each numeric variable.\n  mutate(across(where(is.numeric), list(mean = mean, median = median), na.rm = TRUE, .names = \"{.col}_{.fn}\"))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(...)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\n# A tibble: 1,484 × 22\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.501       0.49    0.500\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.501       0.49    0.500\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.501       0.49    0.500\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.501       0.49    0.500\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.501       0.49    0.500\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.501       0.49    0.500\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.501       0.49    0.500\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.501       0.49    0.500\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.501       0.49    0.500\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.501       0.49    0.500\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;\n\n\n#Task 2: Combining Excel and Delimited Data\n\n#1\nlibrary(readxl)\n#import raw excel data, just the first sheet.\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\", \n                         sheet = excel_sheets(\"white-wine.xlsx\")[1])\nwhite_wine_tbl &lt;- as_tibble(white_wine)\nview(white_wine_tbl)\n\nprint(white_wine_tbl)\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n#2\n#import second sheet of raw excel data with all variable names and info.\nwhite_wine_2nd &lt;- read_excel(\"white-wine.xlsx\",\n                             sheet = excel_sheets(\"white-wine.xlsx\")[2])\n#make column names of RData object as variables from 2nd sheet.\ncolnames(white_wine) &lt;- white_wine_2nd$Variables\n\n#3\n#add additional column as per HW requirements.\nwhite_wine_tbl$Type = c(\"White\")\n\nwhite_wine$Type = c(\"White\")\n\n\n\n#4 - do same as above to red wine raw delimited file.\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\",\n                       delim = \";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(red_wine) &lt;- white_wine_2nd$Variables  \n\nred_wine$Type = c(\"Red\")\n\n#5 - combine the two datasets together\nwines_overall &lt;- bind_rows(white_wine, red_wine)\nprint(wines_overall)\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   Type &lt;chr&gt;\n\n#6 through 9\nlibrary(dplyr)\nfiltered_wines_overall &lt;- wines_overall |&gt;\n  #arrange quality variable from descending order, largest to smallest.\n  arrange(desc(wines_overall$quality)) |&gt;\n  #filter data with quality &lt; 6.5 and alcohol &lt; 132.\n  filter(wines_overall$quality &gt; 6.5, wines_overall$alcohol &lt; 132) |&gt;\n  #Select only certain variables.\n  select(contains(\"acid\"),contains(\"alcohol\"), \"Type\", \"quality\") |&gt;\n  group_by(quality) |&gt;\n  #add mean and standard deviation of alcohol variable for each quality setting.  To do this, need to first use group_by function as shown in one line above.\n  mutate(wine_alcohol_mean = mean(alcohol),\n         wine_alcohol_sd = sd(alcohol))\n\n  print(filtered_wines_overall)\n\n# A tibble: 1,206 × 8\n# Groups:   quality [6]\n   fixed_acidity volatile_acidity citric_acid alcohol Type  quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1            67             0.26        0.39      96 White       8\n 2            61             0.31        0.58     123 White       8\n 3            64             0.32        0.35     125 White       8\n 4             6             0.25        0.28     129 White       8\n 5            59             0.27        0.29     105 White       8\n 6            65             0.36        0.28     124 White       8\n 7            73             0.3         0.34     128 White       8\n 8            53             0.24        0.33      11 White       8\n 9            82             0.37        0.36     117 White       8\n10            72             0.26        0.44     111 White       8\n# ℹ 1,196 more rows\n# ℹ 2 more variables: wine_alcohol_mean &lt;dbl&gt;, wine_alcohol_sd &lt;dbl&gt;\n\n\n#Task 3 - Database Practice\n\nlibrary(DBI)\nlibrary(RSQLite)\n\n#1 - Connect to database\nlahman_db &lt;- dbConnect(RSQLite::SQLite(), \"lahman.db\")\ndbListTables(lahman_db)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n#2 -  return all data from Teams table in the year 2015.\ntbl(lahman_db, \"Teams\") |&gt;\n  filter(yearID == 2015)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [/Users/pranavnair/Documents/Grad School/ST 558/Homework3-2/lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n#3 -  Use SQL to do the same as shown in question 2.\nlahman_db2 &lt;- dbConnect(RSQLite::SQLite(), \"lahman.db\")\n\ntbl(lahman_db2, sql(\n  \"SELECT 'yearID', 'playerID', 'teamID', 'lgID' \n  FROM 'Teams' \n  WHERE ('yearID' = 2015.0)\")\n  )\n\n# Source:   SQL [0 x 4]\n# Database: sqlite 3.45.2 [/Users/pranavnair/Documents/Grad School/ST 558/Homework3-2/lahman.db]\n# ℹ 4 variables: 'yearID' &lt;lgl&gt;, 'playerID' &lt;lgl&gt;, 'teamID' &lt;lgl&gt;, 'lgID' &lt;lgl&gt;\n\n#4 - Return all players from Hall of Fame table.\nlahman_db_modified &lt;- tbl(lahman_db, \"HallOfFame\") |&gt;\n  select(playerID, yearID, category) |&gt;\nprint(lahman_db_modified)\n\n# Source:   SQL [?? x 3]\n# Database: sqlite 3.45.2 [/Users/pranavnair/Documents/Grad School/ST 558/Homework3-2/lahman.db]\n   playerID  yearID category\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   \n 1 cobbty01    1936 Player  \n 2 ruthba01    1936 Player  \n 3 wagneho01   1936 Player  \n 4 mathech01   1936 Player  \n 5 johnswa01   1936 Player  \n 6 lajoina01   1936 Player  \n 7 speaktr01   1936 Player  \n 8 youngcy01   1936 Player  \n 9 hornsro01   1936 Player  \n10 cochrmi01   1936 Player  \n# ℹ more rows\n\n#5 - Combine People table with previously modified HallOfFame table.\nlahman_db_join &lt;- tbl(lahman_db, \"People\") |&gt;\nleft_join(lahman_db_modified, tbl(lahman_db,\"People\"),\n          by = join_by(playerID == playerID)) |&gt;\n  collect() |&gt;\n  select(playerID, yearID, nameFirst, nameLast)\nprint(lahman_db_join)\n\n# A tibble: 23,655 × 4\n   playerID  yearID nameFirst nameLast   \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;      \n 1 aardsda01     NA David     Aardsma    \n 2 aaronha01   1982 Hank      Aaron      \n 3 aaronto01     NA Tommie    Aaron      \n 4 aasedo01      NA Don       Aase       \n 5 abadan01      NA Andy      Abad       \n 6 abadfe01      NA Fernando  Abad       \n 7 abadijo01     NA John      Abadie     \n 8 abbated01     NA Ed        Abbaticchio\n 9 abbeybe01     NA Bert      Abbey      \n10 abbeych01     NA Charlie   Abbey      \n# ℹ 23,645 more rows\n\n#6 - Using chaining to select certain variables in table, group by one variable, and summarize win/loss ratio.\nlahman_db_managers &lt;- tbl(lahman_db, \"Managers\") |&gt;\n      select(playerID, G, W, L) |&gt;\n      group_by(playerID) |&gt;\n      summarize(G_managed = sum(G, na.rm = TRUE),\n             Total_W = sum(W, na.rm = TRUE),\n             Total_L = sum(L, na.rm = TRUE)) |&gt;\n      collect() |&gt;\n      mutate(win_loss_percentage = Total_W/G_managed) |&gt;\n      arrange(desc(win_loss_percentage))\nprint(lahman_db_managers)\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L win_loss_percentage\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;               &lt;dbl&gt;\n 1 bensove01         1       1       0                   1\n 2 burwebi01         1       1       0                   1\n 3 cohenan01         1       1       0                   1\n 4 ebeldi99          3       3       0                   1\n 5 falkbi01          1       1       0                   1\n 6 hardeme01         3       3       0                   1\n 7 simmote01         1       1       0                   1\n 8 steinte01         2       2       0                   1\n 9 sukefcl01         2       2       0                   1\n10 tamarjo01         1       1       0                   1\n# ℹ 739 more rows\n\n#7 - returning all variables from last two questions.\nlahman_total_join &lt;- full_join(lahman_db_managers, lahman_db_join, \n                               by = join_by(playerID == playerID)) |&gt;\n                      select(everything())\n                                 \nprint(lahman_total_join)                               \n\n# A tibble: 23,655 × 8\n   playerID  G_managed Total_W Total_L win_loss_percentage yearID nameFirst\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;               &lt;dbl&gt;  &lt;int&gt; &lt;chr&gt;    \n 1 bensove01         1       1       0                   1     NA Vern     \n 2 burwebi01         1       1       0                   1     NA Bill     \n 3 cohenan01         1       1       0                   1     NA Andy     \n 4 ebeldi99          3       3       0                   1     NA Dino     \n 5 falkbi01          1       1       0                   1     NA Bibb     \n 6 hardeme01         3       3       0                   1   1949 Mel      \n 7 hardeme01         3       3       0                   1   1950 Mel      \n 8 hardeme01         3       3       0                   1   1951 Mel      \n 9 hardeme01         3       3       0                   1   1952 Mel      \n10 hardeme01         3       3       0                   1   1953 Mel      \n# ℹ 23,645 more rows\n# ℹ 1 more variable: nameLast &lt;chr&gt;"
  }
]